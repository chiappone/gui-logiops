import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import ConfigurationPreview from '../../renderer/components/ConfigurationPreview';
import { LogiopsConfiguration } from '../../renderer/types/logiops';

// Mock clipboard API
Object.assign(navigator, {
  clipboard: {
    writeText: vi.fn(() => Promise.resolve()),
  },
});

// Mock document.execCommand for fallback copy
Object.assign(document, {
  execCommand: vi.fn(() => true),
});

describe('ConfigurationPreview', () => {
  const mockConfiguration: LogiopsConfiguration = {
    devices: [
      {
        name: 'Test Mouse',
        vid: '0x046d',
        pid: '0x4082',
        dpi: {
          sensors: [
            { dpi: 1000, default: true },
            { dpi: 1600 }
          ]
        },
        buttons: [
          {
            cid: '0x50',
            action: {
              type: 'key',
              parameters: { keys: ['KEY_A'] }
            }
          }
        ],
        gestures: [
          {
            direction: 'up',
            mode: 'OnRelease',
            action: {
              type: 'key',
              parameters: { keys: ['KEY_UP'] }
            }
          }
        ],
        scrollWheel: {
          hires: true,
          invert: false
        }
      }
    ],
    metadata: {
      version: '1.0.0',
      created: new Date('2024-01-01T00:00:00Z'),
      modified: new Date('2024-01-01T12:00:00Z'),
      filename: 'test.cfg'
    }
  };

  const mockOnExport = vi.fn();

  beforeEach(() => {
    vi.clearAllMocks();
  });

  it('renders without crashing', () => {
    render(<ConfigurationPreview configuration={null} />);
    expect(screen.getByText('Configuration Preview')).toBeInTheDocument();
  });

  it('displays empty state when no configuration is provided', () => {
    render(<ConfigurationPreview configuration={null} />);
    
    expect(screen.getAllByText(/No configuration loaded/)[0]).toBeInTheDocument();
    expect(screen.getAllByText(/Create or load a configuration/)[0]).toBeInTheDocument();
  });

  it('displays configuration content in .cfg format by default', () => {
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    // Check that .cfg format is selected by default
    const cfgRadio = screen.getByLabelText('.cfg Format') as HTMLInputElement;
    expect(cfgRadio.checked).toBe(true);
    
    // Check that generated content is displayed
    expect(screen.getAllByText(/Generated by logiops-gui/)[0]).toBeInTheDocument();
    expect(screen.getAllByText(/devices/)[0]).toBeInTheDocument();
    expect(screen.getAllByText(/Test Mouse/)[0]).toBeInTheDocument();
  });

  it('switches to JSON format when selected', async () => {
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    const jsonRadio = screen.getByLabelText('JSON Format');
    fireEvent.click(jsonRadio);
    
    await waitFor(() => {
      const jsonRadioInput = screen.getByLabelText('JSON Format') as HTMLInputElement;
      expect(jsonRadioInput.checked).toBe(true);
    });
    
    // Check that JSON content is displayed
    expect(screen.getByText(/"devices":/)).toBeInTheDocument();
    expect(screen.getByText(/"name": "Test Mouse"/)).toBeInTheDocument();
  });

  it('displays configuration statistics', () => {
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    expect(screen.getByText('Devices: 1')).toBeInTheDocument();
    expect(screen.getByText(/Lines:/)).toBeInTheDocument();
    expect(screen.getByText(/Characters:/)).toBeInTheDocument();
  });

  it('copies content to clipboard when copy button is clicked', async () => {
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    const copyButton = screen.getByRole('button', { name: /copy.*clipboard/i });
    fireEvent.click(copyButton);
    
    await waitFor(() => {
      expect(navigator.clipboard.writeText).toHaveBeenCalled();
      expect(screen.getByRole('button', { name: /copied/i })).toBeInTheDocument();
    });
    
    // Check that button returns to normal state after timeout
    await waitFor(() => {
      expect(screen.getByRole('button', { name: /copy.*clipboard/i })).toBeInTheDocument();
    }, { timeout: 3000 });
  });

  it('handles clipboard copy failure gracefully', async () => {
    // Mock clipboard to fail
    vi.mocked(navigator.clipboard.writeText).mockRejectedValueOnce(new Error('Clipboard failed'));
    // Mock document.execCommand to also fail
    vi.mocked(document.execCommand).mockReturnValueOnce(false);
    
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    const copyButton = screen.getByRole('button', { name: /copy.*clipboard/i });
    fireEvent.click(copyButton);
    
    // Just verify that the copy was attempted and the component doesn't crash
    await waitFor(() => {
      expect(navigator.clipboard.writeText).toHaveBeenCalled();
    });
    
    // The component should still be functional
    expect(copyButton).toBeInTheDocument();
  });

  it('calls onExport when export button is clicked', () => {
    render(<ConfigurationPreview configuration={mockConfiguration} onExport={mockOnExport} />);
    
    const exportButton = screen.getByRole('button', { name: /export/i });
    fireEvent.click(exportButton);
    
    expect(mockOnExport).toHaveBeenCalledWith(
      expect.stringContaining('Generated by logiops-gui'),
      'cfg'
    );
  });

  it('exports JSON format when JSON is selected', async () => {
    render(<ConfigurationPreview configuration={mockConfiguration} onExport={mockOnExport} />);
    
    // Switch to JSON format
    const jsonRadio = screen.getByLabelText('JSON Format');
    fireEvent.click(jsonRadio);
    
    await waitFor(() => {
      const jsonRadioInput = screen.getByLabelText('JSON Format') as HTMLInputElement;
      expect(jsonRadioInput.checked).toBe(true);
    });
    
    const exportButton = screen.getByRole('button', { name: /export/i });
    fireEvent.click(exportButton);
    
    expect(mockOnExport).toHaveBeenCalledWith(
      expect.stringContaining('"devices"'),
      'json'
    );
  });

  it('disables buttons when no configuration is available', () => {
    render(<ConfigurationPreview configuration={null} onExport={mockOnExport} />);
    
    const copyButton = screen.getByRole('button', { name: /copy.*clipboard/i });
    const exportButton = screen.getByRole('button', { name: /export/i });
    
    expect(copyButton).toBeDisabled();
    expect(exportButton).toBeDisabled();
  });

  it('applies syntax highlighting to .cfg content', () => {
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    // Check for syntax highlighting classes
    const syntaxHighlighted = document.querySelector('.syntax-highlighted');
    expect(syntaxHighlighted).toBeInTheDocument();
    
    // Check that HTML contains syntax highlighting spans
    expect(syntaxHighlighted?.innerHTML).toContain('syntax-comment');
    expect(syntaxHighlighted?.innerHTML).toContain('syntax-keyword');
    expect(syntaxHighlighted?.innerHTML).toContain('syntax-string');
  });

  it('applies syntax highlighting to JSON content', async () => {
    render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    // Switch to JSON format
    const jsonRadio = screen.getByLabelText('JSON Format');
    fireEvent.click(jsonRadio);
    
    await waitFor(() => {
      const syntaxHighlighted = document.querySelector('.syntax-highlighted');
      expect(syntaxHighlighted?.innerHTML).toContain('syntax-property');
      expect(syntaxHighlighted?.innerHTML).toContain('syntax-string');
      expect(syntaxHighlighted?.innerHTML).toContain('syntax-bracket');
    });
  });

  it('handles configuration with no devices', () => {
    const emptyConfig: LogiopsConfiguration = {
      devices: [],
      metadata: {
        version: '1.0.0',
        created: new Date(),
        modified: new Date()
      }
    };
    
    render(<ConfigurationPreview configuration={emptyConfig} />);
    
    expect(screen.getByText('Devices: 0')).toBeInTheDocument();
    expect(screen.getAllByText(/Generated by logiops-gui/)[0]).toBeInTheDocument();
  });

  it('updates preview content when configuration changes', () => {
    const { rerender } = render(<ConfigurationPreview configuration={mockConfiguration} />);
    
    expect(screen.getAllByText(/Test Mouse/)[0]).toBeInTheDocument();
    
    const updatedConfig = {
      ...mockConfiguration,
      devices: [
        {
          ...mockConfiguration.devices[0],
          name: 'Updated Mouse'
        }
      ]
    };
    
    rerender(<ConfigurationPreview configuration={updatedConfig} />);
    
    expect(screen.getAllByText(/Updated Mouse/)[0]).toBeInTheDocument();
    expect(screen.queryAllByText(/Test Mouse/)).toHaveLength(0);
  });

  it('handles configuration generation errors gracefully', () => {
    // Create a configuration that might cause parsing issues
    const problematicConfig = {
      ...mockConfiguration,
      devices: [
        {
          ...mockConfiguration.devices[0],
          // @ts-ignore - intentionally create invalid data for error testing
          buttons: [{ cid: null, action: null }]
        }
      ]
    };
    
    render(<ConfigurationPreview configuration={problematicConfig} />);
    
    // Should still render without crashing, possibly showing error message
    expect(screen.getByText('Configuration Preview')).toBeInTheDocument();
  });
});