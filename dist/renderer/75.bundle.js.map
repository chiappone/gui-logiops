{"version":3,"file":"75.bundle.js","mappings":"0GAYO,SAASA,EAAuBC,GACrC,OAAOC,KAAKC,UAAUF,EAAQ,KAAM,EACtC,C","sources":["webpack://logiops-gui/./src/renderer/utils/serialization.ts"],"sourcesContent":["/**\n * Serialization utilities for converting between internal data models and external formats\n */\n\nimport {\n  LogiopsConfiguration,\n  Device\n} from '../types/logiops';\n\n/**\n * Serializes a LogiopsConfiguration to JSON string\n */\nexport function serializeConfiguration(config: LogiopsConfiguration): string {\n  return JSON.stringify(config, null, 2);\n}\n\n/**\n * Deserializes a JSON string to LogiopsConfiguration\n */\nexport function deserializeConfiguration(json: string): LogiopsConfiguration {\n  const parsed = JSON.parse(json);\n  \n  // Convert date strings back to Date objects\n  if (parsed.metadata) {\n    if (parsed.metadata.created) {\n      parsed.metadata.created = new Date(parsed.metadata.created);\n    }\n    if (parsed.metadata.modified) {\n      parsed.metadata.modified = new Date(parsed.metadata.modified);\n    }\n  }\n  \n  return parsed as LogiopsConfiguration;\n}\n\n/**\n * Creates a deep copy of a configuration\n */\nexport function cloneConfiguration(config: LogiopsConfiguration): LogiopsConfiguration {\n  return deserializeConfiguration(serializeConfiguration(config));\n}\n\n/**\n * Creates a deep copy of a device\n */\nexport function cloneDevice(device: Device): Device {\n  return JSON.parse(JSON.stringify(device));\n}\n\n/**\n * Converts internal data model to a simplified format for display\n */\nexport function toDisplayFormat(config: LogiopsConfiguration): {\n  deviceCount: number;\n  devices: Array<{\n    name: string;\n    id: string;\n    features: {\n      dpi: boolean;\n      buttons: number;\n      gestures: number;\n      scrollWheel: boolean;\n    };\n  }>;\n  metadata: {\n    version: string;\n    created: string;\n    modified: string;\n    filename?: string;\n  };\n} {\n  return {\n    deviceCount: config.devices.length,\n    devices: config.devices.map(device => ({\n      name: device.name,\n      id: `${device.vid}:${device.pid}`,\n      features: {\n        dpi: !!device.dpi,\n        buttons: device.buttons?.length || 0,\n        gestures: device.gestures?.length || 0,\n        scrollWheel: !!device.scrollWheel\n      }\n    })),\n    metadata: {\n      version: config.metadata.version,\n      created: config.metadata.created.toISOString(),\n      modified: config.metadata.modified.toISOString(),\n      filename: config.metadata.filename\n    }\n  };\n}\n\n/**\n * Extracts summary information from a configuration\n */\nexport function getConfigurationSummary(config: LogiopsConfiguration): {\n  deviceCount: number;\n  totalButtons: number;\n  totalGestures: number;\n  devicesWithDPI: number;\n  devicesWithScrollWheel: number;\n} {\n  let totalButtons = 0;\n  let totalGestures = 0;\n  let devicesWithDPI = 0;\n  let devicesWithScrollWheel = 0;\n\n  config.devices.forEach(device => {\n    totalButtons += device.buttons?.length || 0;\n    totalGestures += device.gestures?.length || 0;\n    if (device.dpi) devicesWithDPI++;\n    if (device.scrollWheel) devicesWithScrollWheel++;\n  });\n\n  return {\n    deviceCount: config.devices.length,\n    totalButtons,\n    totalGestures,\n    devicesWithDPI,\n    devicesWithScrollWheel\n  };\n}\n\n/**\n * Validates that a configuration can be safely serialized and deserialized\n */\nexport function validateSerialization(config: LogiopsConfiguration): boolean {\n  try {\n    const serialized = serializeConfiguration(config);\n    const deserialized = deserializeConfiguration(serialized);\n    \n    // Basic structure validation\n    return (\n      deserialized.devices.length === config.devices.length &&\n      deserialized.metadata.version === config.metadata.version &&\n      deserialized.metadata.created instanceof Date &&\n      deserialized.metadata.modified instanceof Date\n    );\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Merges two configurations, with the second taking precedence for conflicts\n */\nexport function mergeConfigurations(\n  base: LogiopsConfiguration, \n  override: LogiopsConfiguration\n): LogiopsConfiguration {\n  const merged = cloneConfiguration(base);\n  \n  // Merge devices by vid:pid, with override taking precedence\n  const deviceMap = new Map<string, Device>();\n  \n  // Add base devices\n  base.devices.forEach(device => {\n    deviceMap.set(`${device.vid}:${device.pid}`, device);\n  });\n  \n  // Override with new devices\n  override.devices.forEach(device => {\n    deviceMap.set(`${device.vid}:${device.pid}`, device);\n  });\n  \n  merged.devices = Array.from(deviceMap.values());\n  \n  // Use override metadata\n  merged.metadata = {\n    ...base.metadata,\n    ...override.metadata,\n    modified: new Date()\n  };\n  \n  return merged;\n}\n\n/**\n * Extracts device-specific configuration\n */\nexport function extractDeviceConfiguration(\n  config: LogiopsConfiguration, \n  vid: string, \n  pid: string\n): Device | null {\n  return config.devices.find(device => device.vid === vid && device.pid === pid) || null;\n}\n\n/**\n * Updates a specific device in the configuration\n */\nexport function updateDeviceInConfiguration(\n  config: LogiopsConfiguration,\n  updatedDevice: Device\n): LogiopsConfiguration {\n  const updated = cloneConfiguration(config);\n  const deviceIndex = updated.devices.findIndex(\n    device => device.vid === updatedDevice.vid && device.pid === updatedDevice.pid\n  );\n  \n  if (deviceIndex >= 0) {\n    updated.devices[deviceIndex] = cloneDevice(updatedDevice);\n  } else {\n    updated.devices.push(cloneDevice(updatedDevice));\n  }\n  \n  updated.metadata.modified = new Date();\n  return updated;\n}\n\n/**\n * Removes a device from the configuration\n */\nexport function removeDeviceFromConfiguration(\n  config: LogiopsConfiguration,\n  vid: string,\n  pid: string\n): LogiopsConfiguration {\n  const updated = cloneConfiguration(config);\n  updated.devices = updated.devices.filter(\n    device => !(device.vid === vid && device.pid === pid)\n  );\n  updated.metadata.modified = new Date();\n  return updated;\n}"],"names":["serializeConfiguration","config","JSON","stringify"],"sourceRoot":""}